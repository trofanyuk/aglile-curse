@model BananaSocialNetwork.Models.Album

<script src="http://maps.google.com/maps/api/js?sensor=true" type="text/javascript"></script>



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Photo</h4>
        <hr />
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.Id)


        <div class="form-group">
            @Html.LabelFor(model => model.Adress, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Adress)
                @Html.ValidationMessageFor(model => model.Adress)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GeoLong, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.GeoLong)
                @Html.ValidationMessageFor(model => model.GeoLong)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.GeoLat, new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.GeoLat)
                @Html.ValidationMessageFor(model => model.GeoLat)
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
        <div id="canvas" style="height: 600px; width:600px;">

            <!--Устанавливаем секцию scripts, которая затем будет рендериться на мастер-странице -->
            @section scripts {
                <script type="text/javascript">
                    var markers = new Array();
                   var GeoLong = @Model.GeoLong.ToString().Replace(',', '.');
                    var GeoLat = @Model.GeoLat.ToString().Replace(',', '.');

                    $(document).ready(function () {
                        GetMapMarker();
                    });

                    function GetMapMarker() {
                        geocoder = new google.maps.Geocoder();

                        google.maps.visualRefresh = true;
                        // установка основных координат
                        var Odessa = new google.maps.LatLng(GeoLat, GeoLong);

                        // Установка общих параметров отображения карты, как масштаб, центральная точка и тип карты
                        var mapOptions = {
                            zoom: 15,
                            center: Odessa,
                            mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
                        };

                        var myLatlng = new google.maps.LatLng(GeoLat, GeoLong);

                        // Встраиваем гугл-карты в элемент на странице и получаем объект карты
                        map = new google.maps.Map(document.getElementById("canvas"), mapOptions);

                        var marker = new google.maps.Marker({
                            position: myLatlng,
                            map: map,
                            title: 'Станции метро'
                        });

                        markers[0] = marker;

                        google.maps.event.addListener(map, 'click', function (e) {

                            placeMarker(e.latLng, map);
                        });

                        function placeMarker(position, map) {
                            var marker = new google.maps.Marker({
                                position: position,
                                map: map
                            });
                            if (markers.length == 1) {
                                markers[0].setMap(null);
                            }

                            markers[0] = marker;
                            var GeoLong = document.getElementById('GeoLong');
                            var GeoLat = document.getElementById('GeoLat');

                            GeoLong.value = marker.position.lng();
                            GeoLat.value = marker.position.lat();
                            map.panTo(position);
                        }

                        function codeAddress() {
                            var address = document.getElementById('Adress').value;
                            geocoder.geocode({ 'address': address }, function (results, status) {
                                if (status == google.maps.GeocoderStatus.OK) {
                                    map.setCenter(results[0].geometry.location);
                                    var marker = new google.maps.Marker({
                                        map: map,
                                        position: results[0].geometry.location
                                    });
                                    if (markers.length == 1) {
                                        markers[0].setMap(null);
                                    }

                                    markers[0] = marker;
                                    var GeoLong = document.getElementById('GeoLong');
                                    var GeoLat = document.getElementById('GeoLat');

                                    GeoLong.value = marker.position.lng();
                                    GeoLat.value = marker.position.lat();
                                } else {
                                    alert('Geocode was not successful for the following reason: ' + status);
                                }
                            });
                        }
                    }
                </script>
            }
        </div>
    </div>
}

